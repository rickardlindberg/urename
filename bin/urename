#!/usr/bin/env python
# This file is automatically generated.
# Check out https://github.com/rickardlindberg/urename for the complete source code.
from optparse import OptionParser

class Options(object):

    def __init__(self):
        usage = "usage: %prog [options] src dest"
        parser = OptionParser(usage)
        (options, args) = parser.parse_args()
        if len(args) == 2:
            self.src = File(args[0])
            self.dest = File(args[1])
        else:
            parser.error("requires src and dest")
class File(object):
    def __init__(self, path):
        self.path = path
import os.path
import re
import subprocess
import sys


class MoveTask(object):

    def __init__(self, src, dest):
        self.src = src
        self.dest = dest

    def perform(self):
        if self.can_be_done() and ask(self.question()):
            if subprocess.call(["mkdir", "-p", os.path.dirname(self.dest)]) != 0:
                return False
            if subprocess.call(["mv", self.src, self.dest]) != 0:
                return False
        return True

    def can_be_done(self):
        return os.path.exists(self.src)

    def question(self):
        return "mv %s %s" % (self.src, self.dest)


class SubstituteTask(object):

    def __init__(self, files, a, b):
        self.files = files
        self.a = a
        self.b = b
        self.find_pattern = re.compile(r"\b%s\b" % a.replace(".", r"\."))

    def perform(self):
        try:
            for filename in self.files:
                f = open(filename, "r")
                lines = f.readlines()
                f.close()

                def foo(line):
                    match = self.find_pattern.search(line)
                    if match and ask(self.question(filename, line)):
                        return self.find_pattern.sub(self.b, line)
                    return line
                lines = [foo(line) for line in lines]

                f = open(filename, "w")
                f.writelines(lines)
                f.close()

            return True
        except Exception, e:
            print e
            return False

    def question(self, filename, line):
        return "substitute: %s -> %s\n\t%s: %s" % (
            self.a, self.b, filename, line)


def run_tasks(tasks):
    for task in tasks:
        if not task.perform():
            sys.exit(1)


def ask(question):
    print question, "[Y/n]",
    answer = raw_input()
    if answer == "":
        return True
    elif answer.lower() == "y":
        return True
    elif answer.lower() == "n":
        return False
    else:
        return ask(question)
def analyze(src, dest):
    return [MoveTask(src.path, dest.path)] + GeneralPlugin(src, dest).tasks()
class GeneralPlugin(object):

    def __init__(self, src, dest):
        self.src = src
        self.dest = dest

    def tasks(self):
        all_files = find(".")
        return [SubstituteTask(all_files, self.src.path, self.dest.path)]


def find(path):
    all_files = []
    for (root, dirs, files) in os.walk(path):
        all_files += filter(include, [os.path.join(root, x) for x in files])
    return all_files


def include(filepath):
    if ".git/" in filepath:
        return False
    if ".swp" in filepath:
        return False
    if os.path.basename(filepath) == "tags":
        return False
    return True
print "urename is here"
o = Options()
run_tasks(analyze(o.src, o.dest))
